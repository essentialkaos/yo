name: CI

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master]
  schedule:
    - cron: '0 12 */15 * *'

jobs:
  Go:
    name: Go
    runs-on: ubuntu-latest

    env:
      SRC_DIR: src/github.com/${{ github.repository }}
      GO111MODULE: auto

    strategy:
      matrix:
        go: [ '1.17.x', '1.18.x' ]

    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}
        id: go

      - name: Setup PATH
        run: |
          echo "GOPATH=${{ github.workspace }}" >> "$GITHUB_ENV"
          echo "GOBIN=${{ github.workspace }}/bin" >> "$GITHUB_ENV"
          echo "${{ github.workspace }}/bin" >> "$GITHUB_PATH"

      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: ${{env.SRC_DIR}}

      - name: Download dependencies
        working-directory: ${{env.SRC_DIR}}
        run: make deps

      - name: Build binary
        working-directory: ${{env.SRC_DIR}}
        run: make all

      - name: Run tests
        working-directory: ${{env.SRC_DIR}}
        run: .scripts/script.sh

  Aligo:
    name: Aligo
    runs-on: ubuntu-latest

    needs: Go

    env:
      SRC_DIR: src/github.com/${{ github.repository }}
      GO111MODULE: auto

    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.17.x'
        id: go

      - name: Setup PATH
        run: |
          echo "GOPATH=${{ github.workspace }}" >> "$GITHUB_ENV"
          echo "GOBIN=${{ github.workspace }}/bin" >> "$GITHUB_ENV"
          echo "${{ github.workspace }}/bin" >> "$GITHUB_PATH"

      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: ${{env.SRC_DIR}}

      - name: Download dependencies
        working-directory: ${{env.SRC_DIR}}
        run: make deps

      - name: Check Golang sources with Aligo
        uses: essentialkaos/aligo-action@v1
        with:
          path: ${{env.SRC_DIR}}
          files: ./...

  Perfecto:
    name: Perfecto
    runs-on: ubuntu-latest

    needs: Go

    steps:
      - name: Code checkout
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v1
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        if: ${{ env.DOCKERHUB_USERNAME != '' }}
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check specs with Perfecto
        uses: essentialkaos/perfecto-action@v1
        with:
          files: common/yo.spec

  Hadolint:
    name: Hadolint
    runs-on: ubuntu-latest

    needs: Go

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check dockerfiles with Hadolint
        uses: essentialkaos/hadolint-action@v1
        with:
          files: Dockerfile

  DockerBuild:
    name: Docker Build Check
    runs-on: ubuntu-latest

    needs: Hadolint

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v1
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        if: ${{ env.DOCKERHUB_USERNAME != '' }}
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -f Dockerfile -t yo .

      - name: Measure image size
        run: |
          image_size=$(docker inspect -f "{{ .Size }}" yo)
          printf "\033[1mUncompressed image size:\033[0m %d (%s)\n" $image_size $(echo "$image_size" | numfmt --to=si)
